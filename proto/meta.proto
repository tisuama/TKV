syntax="proto2";
import "common.proto";
import "optype.proto";
package TKV.pb;
option cc_generic_services = true;

enum Status {
    NORMAL = 1;
    FAULTY = 2;
    DEAD = 3;
    MIGERATE = 4;
    FULL = 5;
    SLOW = 6;
};

enum RegionStatus {
    IDLE = 1;
    DOING = 2;
};

enum PeerStatus {
    STATUS_NORMAL = 0;
    STATUS_UNSTABLE = 1; // add_peer?
    STATUS_ERROR = 2;
    STATUS_ILLEGAL_PEER = 3;
    STATUS_NOT_HEARTBEAT = 4;
    STATUS_NOT_LEADER = 5;
    STATUS_SET_PEER = 6;
    STATUS_INITED = 7;
};

message PeerStateInfo {
    optional string peer_id = 1;
    optional PeerStatus peer_status = 2;
    optional int64 table_id = 3;
    optional uint32 timestamp = 4;
    optional int64 region_id = 5;
    optional bool is_learner = 6;
};

message InstanceInfo {
    required string address = 1;
    optional int64 capacity = 2; 
    optional int64 used_size = 3;
    optional string resource_tag = 4;
    optional string physical_room = 5;
    optional Status status = 6;
    optional string logical_room = 7;
    optional string version = 8;
    optional int64 raft_total_latency = 9;
    optional int64 raft_total_qps = 10;
    optional int64 select_latency = 11;
    optional int64 select_qps = 12;
    // The store id of this instance
    optional int64 store_id = 13;
};

message SchemaHB {
    required int64 table_id = 1;
    required int64 version = 2;
};

message RegionInfo {
    required int64 region_id = 1;
    optional string table_name = 2;
    required int64 talbe_id = 3;
    required int64 replica_num = 4;
    required int64 version = 5;
    optional bytes start_key = 6;
    optional bytes end_key = 7;
    repeated string peers = 8; // 包含leader
    optional string leader = 9;
    optional RegionStatus status = 10;
    optional int64 used_size = 11;
    optional int64 log_index = 12;
    optional bool deleted = 13; 
    optional bool can_add_peer = 14;
    optional int64 parent = 15;
    optional uint32 timestamp = 16;
    repeated string learners = 17;
    optional bool is_learner = 18;
};

message LeaderHB {
    required RegionInfo region =  1;
    optional RegionStatus status = 2;
    repeated PeerStateInfo peer_status = 3;
};

message PeerHB {
    required int64 region_id = 1;
    required int64 table_id = 2;
    required int64 log_index = 3;
    // no more need
};

message ReplicaDist {
    required string logical_room = 1;
    required int64 count = 2;
};

// MUST ensure file_id in fileds are continuous and sorted
message SplitKey {
    optional bytes index_name = 1;
    repeated bytes split_keys = 2;
};

enum RW {
    READ = 1;
    WRITE = 2;
};

message PrivilegeDatabase {
    required string database = 1;
    required int64 database_id = 2;
    optional RW rw = 3;
    optional bool force = 4;
};

message PrivilegeTable {
    required string database = 1;
    optional int64 database_id = 2; 
    required string table_name = 3;
    optional int64 table_id = 4;
    optional RW table_rw = 5;
    optional bool force = 6;
};

enum PartitionType {
    PT_HASH = 1;
    PT_RANGE = 2;
};

message PartitionInfo {
    required PartitionType type = 1;
    optional int32 partition_field = 2;
    repeated string partition_names = 3;
};

// No fileds now
// No index now
message SchemaInfo {
    optional int64 table_id = 1;
    required string table_name = 2;
    optional string new_table_name = 3;
    required string database = 4;
    optional int64 database_id = 5;
    required string namespace_name = 6;
    optional int64 namespace_id = 7;
    optional int64 region_size = 8;
    optional int64 replica_num = 9;
    repeated string init_store = 10;
    optional bool deleted = 11;
    optional int64 byte_size_per_record = 12;
    optional uint32 timestamp = 13;
    repeated ReplicaDist dists = 14;
    optional string main_logical_room = 15;
    optional int64  region_split_lines = 16;
    optional SplitKey split_keys = 17;
    repeated string  learner_resource_tags = 19;
    optional int32 region_num = 20;
    optional string comment = 21; 
    optional PartitionInfo partition_info = 22;
    optional int64 partition_num = 23;
    optional string resource_tag = 24;
    optional Engine  engine = 25;
    optional int64 version = 26;
};

message LearnerHB {
    repeated RegionInfo region = 1;
    optional RegionStatus status =  2;
    optional PeerStatus state = 3;
};

message StoreHBRequest {
    required InstanceInfo instance_info = 1;
    repeated SchemaHB schema_info = 2;
    repeated LeaderHB leader_regions = 3;
    repeated PeerHB peer_info = 4;
    optional bool need_leader_balance = 5;
    optional bool need_peer_balance = 6;
    repeated LearnerHB learner_regions = 7;
};

message AddPeer {
    required int64 region_id = 1;
    repeated string old_peers = 2;
    repeated string new_peers = 3;
};

message TransLeaderRequest {
    required int64 region_id = 1;
    required string old_leader = 2;
    required string new_leader = 3;
    optional int64 table_id = 4;
};

message ParamDesc {
    optional string key = 1;
    optional string value = 2;
    optional bool is_meta_param = 3;
};

message InstanceParam {
    optional string resource_tag_or_addr = 1;
    repeated ParamDesc params = 2;
};

message StoreHBResponse {
    required ErrorCode errcode = 1;
    optional string errmsg = 2;
    repeated SchemaInfo schema_change_info = 3;
    repeated int64 deleted_region_ids = 4;
    repeated AddPeer add_peers = 5;
    optional string leader = 6;
    repeated TransLeaderRequest trans_leader = 7;
    repeated int64 trans_leader_table_id = 8;
    repeated int64 trans_leader_count = 9;
    repeated InstanceParam instance_param = 10;
};

message NameSpaceInfo {
    required string    namespace_name = 1;
    optional int64     namespace_id = 2; 
    optional int64     quota = 3;
    optional int64     version = 4;
    optional bool      deleted = 5;
    optional string    resource_tag = 6;
};

message DataBaseInfo {
    required string     database_name = 1;
    optional int64      database_id = 2;
    required string     namespace_name = 3;
    optional int64      namespace_id = 4;
    optional int64      quota = 5;
    optional int64      version = 6;
    optional bool       deleted = 7;
    optional string     resource_tag = 8;
};

message UserPrivilege {
    required string     username = 1;
    optional string     password = 2;
    required string     namespace_name = 3;
    optional int64      namespace_id = 4;
    repeated PrivilegeDatabase database = 5;
    repeated PrivilegeTable    table = 6;
    repeated string     bns = 7;
    repeated string     ip = 8;
    optional int64      version = 9;
    optional bool       encrypt = 10;
    optional bool       need_auth_addr = 11; 
};

// 集群信息、逻辑机房
message LogicalRoom {
    repeated string logical_rooms = 1;
};

message PhysicalRoom {
    required string logical_room = 1;
    repeated string physical_rooms = 2;
};

message MovePhysicalRequest {
    required string physical_room = 1;
    required string old_logical_room = 2;
    required string new_logical_room = 3;
};

message RegionSplitRequest {
    required int64 region_id = 1;
    required bytes split_key = 2;
    optional string new_instance = 3;
    optional bool tail_split = 4;// 是否为尾分裂
    optional int64 table_id = 5;
    optional string resource_tag = 6;
};

message RestoreRegionRequest {
    optional int64 restore_region_id = 1;
    optional int64 lower_region_id = 2;
    optional int64 upper_region_id = 3;
};

message RegionMergeRequest {
    required int64 src_region_id = 1;
    required bytes src_start_key =2;
    required bytes src_end_key = 3;
    required int64 table_id = 4;
};

enum RecoverOpt {
    DO_DONE = 1;
    DO_REMOVE_ILLEGAL_PEER = 2;
    DO_REMOVE_PEER = 3;
    DO_SET_PEER = 4;
    DO_INIT_REGION = 5;
};

message MetaManagerRequest {
    required OpType                  op_type         = 1;
    optional SchemaInfo              table_info      = 2;// 建立、删除表
    optional NameSpaceInfo           namespace_info  = 3;// 建立、删除、修改namespace
    optional DataBaseInfo            database_info   = 4;// 建立、删除、修改database
    optional UserPrivilege           user_privilege  = 5;// 创建用户、增加权限
    // 加字段、索引，删除字段、索引，改字段、索引名称，改类型
    // optional AlterTableRequest       alter_table     = 6;
    optional LogicalRoom             logical_room    = 7;// 新增、删除逻辑机房
    optional PhysicalRoom            physical_rooms  = 8;// 新增、删除物理机房
    optional InstanceInfo            instance        = 9;// 新增、删除实例
    optional MovePhysicalRequest     move_request    = 10;// 转移逻辑机房
    optional RegionInfo              region_info     = 11;// 新增、删除region
    repeated int64                   drop_region_ids = 12;// 删除的reion集合
    optional RegionSplitRequest      region_split    = 13;// region 分裂
    optional RestoreRegionRequest    restore_region  = 14;// 恢复误删除的region
    repeated string                  resource_tag    = 15;// resource_tag 的操作
    optional RegionMergeRequest      region_merge    = 16;// region 合并
    optional bool                    need_merge      = 17;
    // region_info & region_infos 不同在哪里
    optional RegionInfo              region_infos    = 18;
    optional bool                    add_delete_region = 19;// 添加被删除的region     
    optional InstanceParam           instance_params = 20;
    optional RecoverOpt              recover_opt     = 21;
    optional int64                   learner_replica_num = 22;
};

message RegionSplitResponse {
    required int64 old_region_id = 1;
    required int64 new_region_id = 2;
    required string new_instance = 3;
    required string add_peer_instance = 4;
};

message RegionMergeResponse {
    optional int64 dst_region_id = 1;
    optional string dst_instance = 2;
    optional bytes dst_start_key = 3;
    optional bytes dst_end_key = 4;
    optional int64 version = 5;
    optional int64 dst_version = 6;
};

message RegionRecoverResponse {
    repeated PeerStateInfo set_peer_regions = 1;
    repeated PeerStateInfo inited_regions = 2;
    repeated PeerStateInfo illegal_regions = 3;
};

message MetaManagerResponse {
    required ErrorCode errcode = 1;
    optional string errmsg = 2;
    optional string leader = 3;
    optional RegionSplitResponse split_response = 4;
    optional OpType op_type = 5;
    optional uint64 start_id = 6;
    optional uint64 end_id = 7;
    optional RegionMergeResponse merge_response = 8;
    optional RegionRecoverResponse recover_response = 9;
};

service MetaService {
    rpc store_heartbeat(StoreHBRequest) returns (StoreHBResponse);
    rpc meta_manager(MetaManagerRequest) returns (MetaManagerResponse);
};
/* vim: set expandtab ts=4 sw=4 sts=4 tw=100: */
